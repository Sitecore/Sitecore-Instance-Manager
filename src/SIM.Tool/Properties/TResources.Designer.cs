//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIM.Tool.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SIM.Tool.Properties.TResources", typeof(TResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose installation package.
        /// </summary>
        internal static string ChooseInstallationPackage {
            get {
                return ResourceManager.GetString("ChooseInstallationPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure that you want to delete the {0} instance?.
        /// </summary>
        internal static string ConfirmDeleteInstance {
            get {
                return ResourceManager.GetString("ConfirmDeleteInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure that you want to reinstall the {0} instance?.
        /// </summary>
        internal static string ConfirmReinstallInstance {
            get {
                return ResourceManager.GetString("ConfirmReinstallInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SQL connection string isn&apos;t set in the Settings window.
        /// </summary>
        internal static string ConnectionStringNotSet {
            get {
                return ResourceManager.GetString("ConnectionStringNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; database already exists.
        /// </summary>
        internal static string DatabaseAlreadyExists {
            get {
                return ResourceManager.GetString("DatabaseAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Would you like to delete it with all the contents?.
        /// </summary>
        internal static string DoYouWantDeleteContents {
            get {
                return ResourceManager.GetString("DoYouWantDeleteContents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; isn&apos;t empty. .
        /// </summary>
        internal static string FolderNotEmpty {
            get {
                return ResourceManager.GetString("FolderNotEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The installer isn&apos;t ready - check the Settings window.
        /// </summary>
        internal static string InstallerNotReady {
            get {
                return ResourceManager.GetString("InstallerNotReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance name isn&apos;t set.
        /// </summary>
        internal static string InstanceNameNotSet {
            get {
                return ResourceManager.GetString("InstanceNameNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license file isn&apos;t set in the Settings window.
        /// </summary>
        internal static string LicenseFileNotSet {
            get {
                return ResourceManager.GetString("LicenseFileNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location folder isn&apos;t set.
        /// </summary>
        internal static string LocationNotSet {
            get {
                return ResourceManager.GetString("LocationNotSet", resourceCulture);
            }
        }
    }
}
